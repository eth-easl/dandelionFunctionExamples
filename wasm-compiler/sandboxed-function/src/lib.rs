#![no_std]
/// This is a wrapper around the transpiled Rust code generated by rWasm.
/// It exposes the necessary entrypoints for Dandelion.
/// This wrapper is necessary because the exposed functions must be
/// #[no_mangle], which does not work with the #![forbid(unsafe_code)]
/// requirement in the rWasm generated code.

extern crate sandbox_generated;

use sandbox_generated as Generated;

struct __WasmModule {
    module: Generated::WasmModule,
}

impl __WasmModule {
    #[no_mangle]
    pub fn new() -> Self {
        Self {
            module: Generated::WasmModule::new(),
        }
    }
    #[no_mangle]
    #[allow(non_snake_case)]
    pub fn get___system_data(&self) -> Option<i32> {
        self.module.get___dandelion_system_data()
    }
    #[no_mangle]
    #[allow(non_snake_case)]
    pub fn alloc(&mut self, size: i32, alignment: i32) -> i32 {
        self.module.dandelion_alloc(size, alignment).unwrap()
    }
}

#[no_mangle]
pub fn _start() {
    let mut module = __WasmModule::new();
    module.module._start();
}